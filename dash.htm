<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=.75, shrink-to-fit=yes">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
  <link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.css" />
  <link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid-theme.min.css" />
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.js"></script>
  <script src="lib/ckeditor/ckeditor.js"></script>
  <script src="lib/papaparse.min.js"></script>
  <link REL="SHORTCUT ICON" HREF="img/favicon.ico">
  <title>èt • al dashboard</title>
</head> 
<style>
	body 		{ 	font-family:Segoe UI,Verdana,Geneva,sans-serif; font-size:12px; padding:0px; margin:16px; box-sizing:content-box; }
	.co-bar		{	position:absolute; color:#000; text-align:center; width:100%; user-select:none;
					padding: 12px 0; top:66px; left:0; pointer-events: none; }
   	.co-dialog 	{	position: absolute; top:16px; left:16px; background-color: #eee; border: 2px solid #aaa;
					padding:16px; border-radius: 16px; width:600px;	}
	.co-confirm {	position: absolute;  width: 250px; padding: 16px; left: calc(50% - 125px); top: calc(50% - 150px); user-select: none;	
					border-radius: 8px; background-color: #fff; border: 1px solid #999; box-shadow: 2px 2px 4px 2px #aaa; }
	.co-popup 	{	position: absolute;  width: auto; padding: 12px; left: calc(50% - 100px); top: calc(50% - 50px);
					border-radius: 8px; background-color: #eee; border: 1px solid #999; box-shadow: 4px 2px 12px 2px #aaa; 
					font-size: 14px; text-align:center; display: none; }
	.co-is 		{	border-radius:12px; padding:1px 8px; border:1px solid #999; width:84px; }
	.co-bs 		{	cursor: pointer; color:#fff; text-align: center; border-radius: 16px; display: inline-block; user-select: none;
					font-size: 13px; background-color:  #999; padding: 2px 8px 2px 8px; }
	.jsgrid-cell{	overflow:hidden; }
	.co-venue 	{	display:inline-block; height:calc(100vh - 332px); width:250px; border:1px solid #999; vertical-align:top;
					padding:12px; margin-right:12px; background-color:#f8f8f8;  user-select:none;}
	.co-grid 	{	display:grid; height:calc(100vh - 310px); width:100%;  user-select:none;}
	.co-room 	{	background-repeat:repeat; border:.5px solid #999; text-align:center; 
					text-shadow:1px 1px #bbb; font-size:9px; }
	.co-rich 	{	position:absolute; background-color:#fff; top:55px; left:40%; display:none; width:fit-content; height:fit-content;
					border:1px solid #999; background-color:#f8f8f8; border-radius:8px }
	.co-colChip	{	display:inline-block; border-radius:5px; height:16px;width:16px; border:1px solid #999; 
					margin-left:6px; cursor:pointer; vertical-align:-4px; }
	.co-images	{	width:66vw; background-color:#f8f8f8; overflow-y:auto; border:1px solid #999; border-radius:8px; max-height:33vh; padding:4px}
	.co-pic		{	display:inline-block; width:128px; height:128px; border:1px solid #999;
					overflow: hidden; margin:6px; cursor:pointer; background-color:#ccc;}

	#co-tab	{ background:transparent;  border:none; margin-left:-8px; }
	#co-tab .ui-widget-header { background:transparent; border:none; background-color: #ccc; } 
	#co-tab .ui-tabs-nav .ui-state-default { background:transparent; border:none;  }
	#co-tab .ui-tabs-nav .ui-state-default a { color: #888; font-size:24px; }
	#co-tab .ui-tabs-nav .ui-state-active a {  color: #fff; font-weight:bold;font-size:24px; outline:none; }

</style>

<body>
	<img style="float:right;width:80px" src="img/logo.png">
	<div id="co-meetingName" style="text-align:center;font-size:30px;color:#999;font-weight:bold;margin:-8px 0 4px 0"></div>
	<div id="co-tab">
		<ul>
			<li id="co-tab1"><a href="#jsGrid-people">PEOPLE</a></li>
			<li id="co-tab2"><a href="#jsGrid-schedule">SCHEDULE</a></li>
			<li id="co-tab3"><a href="#venueEditor">VENUE</a></li>
			<li id="co-tab4"><a href="#liveEditor">LIVE</a></li>
		</ul>
		<div id="jsGrid-people"></div>
		<div id="jsGrid-schedule"></div>
		<div id="venueEditor" style="padding:0";></div>
		<div id="liveEditor"></div>
	</div>	
	<input type="file" id="co-filepeople" style="display:none">
	<input type="file" id="co-fileschedule" style="display:none">
	<input type="file" id="co-filevenue" style="display:none">
	<input type="file" id="co-imageUpload" style="display:none">
	<div id="co-tData" class="co-bar">
		<div style="float:right;margin-right:36px; pointer-events:all">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			Load from&nbsp;&nbsp;<select id="co-loadpeople" class="co-is">
			<option>Choose source</option>
			<option>Meeting server</option>
			<option>Local CSV file</option>
			<option>Google docs</option>
			</select>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			Publish to&nbsp;&nbsp;<select id="co-savepeople" class="co-is">
				<option>Choose destination</option>
				<option>Meeting server</option>
				<option>Local CSV file</option>
				</select>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div class="co-bs"  id="co-clearpeople" style="float:right;background-color:#e22908">Clear</div>
			</div>
	</div>
	<div id="editorDiv" class="co-rich">
		<img id="cancelRichBut" style="position:absolute;top:14px;left:calc(100% - 30px);cursor:pointer" src="img/closedot.png">
		<textarea class="ckeditor" id="editor1" name="editor1" style="width:100%;height:100%"></textarea>
		<p id='saveRichBut' class='co-bs' style="float:right;margin-right:24px">Save changes</p>
	</div>
	<textarea id='clipOutputDiv' style='width:1px;height:1px;opacity:.01'></textarea>

<script>

	let app=null;

	$(document).ready(function() {								           							// ON PAGE LOADED
		$("#co-tab" ).tabs();																		// Init tabs
		app=new App();                                      										// Alloc app
		Login((e, p, m)=>{ app.ws.send(`I|${e}|${p}|${m}`); });										// Send login data to WS
		$("#editorDiv").resizable({ 																// Make it resizable
			stop:(e,ui)=>{ CKEDITOR.instances.editor1.resize(ui.size.width,ui.size.height) }		// Resize editor
			});

		$("#cancelRichBut").on("click", ()=>{ $("#editorDiv").hide(); });							// Hide rich text editor						
		$("#saveRichBut").on("click", ()=>{ 														// ON RICH BUT CLICNK
			$("#editorDiv").hide(); 																// Hide rich text editor						
			let d=$("#jsGrid-schedule").jsGrid("option","data");									// Get data
			d[app.curRow].content=CKEDITOR.instances.editor1.getData();								// Set new content
			$("#jsGrid-schedule").jsGrid("option","data",d);										// Put data	
			});	
	
		$(window).on("keydown",function(e) {														// HANDLE KEYPRESS
			if ((e.which == 85) && e.altKey && e.ctrlKey) {											// Update key (Ctrl+Alt+U)
				app.GDriveLoad(GetCookie(`${app.meetingId}-${app.curTable}-gdoc`), app.curTable,true); 	// Load table from gdocs and send to server
				}
			if ((e.keyCode == 90) && !e.shiftKey && e.ctrlKey) 	app.Undo();							// UNDO KEY (Ctrl+Z)  
			if (((e.keyCode == 89) && e.ctrlKey) || ((e.keyCode == 90) && e.ctrlKey)) app.Redo();	// REDO KEY (Ctrl+Y / Shift+Ctrl+Z)  
			if ((e.which == 80) && e.altKey && e.ctrlKey) {											// PALETTE KEY (Ctrl+Alt+P)
				let p=localStorage.getItem("palette-"+app.meetingId);								// Get locally stored palette entries
				if (!p) p="";																		// Nul; to ""
				p+=`<option value='${$("#co-cpcp").val()}'/>`;										// Get new color
				localStorage.setItem("palette-"+app.meetingId,p);									// Add it
				Sound("ding");																		// Ding
				}
			if ((e.which == 84) && e.altKey && e.ctrlKey) {											// Test key (Ctrl+Alt+T)
				}
		});
	});


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UI																							    http://js-grid.com
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	$("#co-tab1").on("click",()=>{ app.curTable="people"; 	$("#co-tData").css("display","block"); });
	$("#co-tab2").on("click",()=>{ app.curTable="schedule"; $("#co-tData").css("display","block")  });
	$("#co-tab3").on("click",()=>{ app.curTable="venue";  	$("#co-tData").css("display","block"); app.DrawVenue(); });
	$("#co-tab4").on("click",()=>{ app.curTable="live";  	$("#co-tData").css("display","none");  app.DrawLive();  });

	$("[id^=co-load]").on("change", function(e) {													// ON LOAD
		let i=$(this).prop("selectedIndex");														// Get option
		if (i == 1) 	 	app.GetFromServer(app.curTable);										// From server
		else if (i == 2) 	$("#co-file"+app.curTable).trigger("click");							// From local CSV file
		else if (i == 3) 	GetTextBox("Load from Google Sheets",									// From Google
										"Paste link from Google Sheets",
										GetCookie(`${app.meetingId}-${app.curTable}-gdoc`), 
										(s)=>{ 	let d=new Date();	d.setTime(d.getTime()+365*24*60*60*1000);	d=d.toUTCString()	// Cookie expires after a year
												document.cookie=`${app.meetingId}-${app.curTable}-gdoc=${s}; expires=${d};`;
												app.GDriveLoad(s, app.curTable); 
												});
		$(this).prop("selectedIndex",0);															// Clear
		});

	$("[id^=co-save]").on("change", function(e) {													// ON SAVE
		let i=$(this).prop("selectedIndex");														// Get option
		if (i == 1) 	 	app.SaveToServer(app.curTable);											// Erase and save
		else if (i == 2) 	app.SaveToCSV(app.curTable);											// Save to csv
		$(this).prop("selectedIndex",0);															// Clear
		});

	$("[id^=co-clear]").on("click",(e)=>{															// ON CLEAR
		ConfirmBox("Are you sure?","",()=>{															// Are we sure?
			if (app.curTable == "venue") app.EditVenue([]);
			else $("#jsGrid-"+app.curTable).jsGrid("option", "data", [])
			}) 
		});

	$("[id^=co-file]").on("change",(e)=>{															// ON FILE
		ReadFile(e,"co-"+app.curTable,app.curTable); $("#co-file"+app.curTable).val("");			// Read file
		});

	$("#co-imageUpload").on("change",(e)=>{															// ON IMAGE UPLOAD
		let myReader=new FileReader();																// Alloc reader
		let s=app.meetingId+"/"+e.target.files[0].name;												// Make up file name
		myReader.onloadend=(e)=>{ 																	// When loaded
			app.ws.send("IMG|"+s+"|"+myReader.result);												// Send base64 to server
			app.S3Images.push(s);																	// Add to list	
			}						
		myReader.readAsDataURL(e.target.files[0]);													// Load file		
		});

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// APP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class App  {																					

	constructor()   																			// CONSTRUCTOR
	{
		app=this;																					// App global pointer
		this.curUndo=0;																				// Undo counter
		this.undos=[];																				// Holds undos
		this.people=[];																				// Holds people
		this.schedule=[];																			// Holds schedule
		this.venue=[];																				// Holds venue
		this.S3Images=[];																			// Holds S3 images
		this.curRow=0;																				// Current row I'm editing
		this.curRoom=0;																				// Current room
		this.curFloor=0;																			// Current floor
		this.curTable="people";																		// Current db table
		this.InitSpreadSheets();																	// Init jsGrid
		if (window.location.host == "localhost") this.ws=new WebSocket('ws://'+window.location.host+':8080');	// Open insecure websocket											
		else									 this.ws=new WebSocket('wss://'+window.location.host+':8080');	// Secure											
		this.ws.onmessage=(e)=>{ this.SocketIn(e); };												// ON INCOMING MESSAGE
		this.ws.onclose=()=>   { console.log('disconnected'); this.ws=null; Sound("delete") };		// ON CLOSE
		this.ws.onerror=(e)=>  { console.log('error',e);	};										// ON ERROR
		this.ws.onopen=()=> { 																		// ON OPEN
			console.log('connected'); 
			}
	}

	SocketIn(event)																				// A WEBSOCKET MESSAGE
	{
		let msg=event.data;																			// Get message
		let v=event.data.split("|");																// Split message
		if (v[0] == "P") 		this.SetTableData("people",JSON.parse(v[1]));						// Set people
		else if (v[0] == "S") 	this.SetTableData("schedule",JSON.parse(v[1]));						// Schedule
		else if (v[0] == "V") 	this.SetTableData("venue",JSON.parse(v[1]));						// Venue
		else if (v[0] == "I") {																		// Logging in
			if (v[1].match(/!$/)) {																	// Some error
				Login((e, p, m)=>{ app.ws.send(`I|${e}|${p}|${m}`); });								// Log in again
				PopUp("<b>Sorry</b><br><br>"+v[1]); 												// Show error
				Sound("delete");																	// Delete
				}
 			else{
				this.meetingId=v[1]; 																// Set id
				$("#co-meetingName").text("MEETING ID: " +(this.meetingId=v[1]));					// Set title
				app.ws.send(`P|${app.meetingId}`);													// Request people data	
				app.ws.send(`V|${app.meetingId}`);													// Venue 
				app.ws.send(`S|${app.meetingId}`);													// Schedule
				app.ws.send(`IMGL|${app.meetingId}`);												// S3 images
				}
			}						
		else if (v[0] == "IMGL") 	app.S3Images=(JSON.parse(v[1]));								// Get S3 images
		else if (v[0] == "IMG") 	app.DrawLive();													// Refreh when new images loaded
	}

	InitSpreadSheets()																			// INIT JSGRID
	{
		var RichTextEdit = function(config) { jsGrid.Field.call(this, config); };
 		RichTextEdit.prototype = new jsGrid.Field({ align: "center",       
			editTemplate: function(value,a) {  
				let s=`<button class="co-bs" style="border:none;outline:none" 
				onclick="app.RichEdit('${app.curRow}')">Edit</button>`;
				return this._editPicker=s 
				}
			});
		jsGrid.fields.rich=RichTextEdit;

		this.pFields=[{ name:"firstName", type:"text", width:100, validate:"required" },
			{ name:"lastName", type:"text", width:100, validate:"required" },
			{ name:"email", type:"text", width:100, validate:"required"},
			{ name:"title", type:"text", width:100 },
			{ name:"org", type:"text",width:100 },
			{ name:"ints", type:"text",width:100 },
			{ name:"pic", type:"text",width:100 },
			{ name:"li", type:"text",width:100 },
			{ name:"web", type:"text",width:100 },
			{ name:"role", type:"text",width:100 },
			{ name:"f", type:"text",width:50 },
			{ name:"x", type:"text",width:50 },
			{ name:"y", type:"text",width:50 },
			{ name:"stats", type:"text",width:50 },
			{ type: "control" }];

		this.sFields=[	{ name:"day", type:"text", width:30, validate:"required"},
			{ name:"start", type:"text", width:80, validate:"required"},
			{ name:"end", type:"text", width:80, validate:"required"},
			{ name:"desc", type:"text",width:150 },
			{ name:"floor", type:"text", width:30, validate:"required"},
			{ name:"room", type:"text", width:30, validate:"required"},
			{ name:"bar", type:"text", width:30 },
			{ name:"link", type:"text",width:250 },
			{ name:"content", type:"rich", width:150},
			{ type: "control" }];

		$("#jsGrid-people").jsGrid({ width:"100%", height:"calc(100vh - 168px)",
				inserting:true, editing:true, sorting:true,
				fields: this.pFields, data:[],
				onItemEditing: function(args) { app.curRow=args.itemIndex;  }
				});
		$("#jsGrid-schedule").jsGrid({ width:"100%", height:"calc(100vh - 168px)",
				inserting:true, editing:true, sorting:true,
				fields: this.sFields, data:[],
				onItemEditing: function(args) { app.curRow=args.itemIndex;  }
				});
	
		$("#jsGrid-people").css("padding",0)		
		$("#jsGrid-schedule").css("padding",0)		
	}

	RichEdit(row)																						// SHOW RICH TEXT EDITOR
	{
		let rn=app.schedule[row].room;																		// Get room number
		let fn=app.schedule[row].floor;																		// Get floor number
		let r=app.venue[fn][rn];																			// Point at room
		let p=app.venue[fn][0].params;																		// Point at params
		let w=($("body").width()/p.cols)*Math.max(1,Math.abs(r.ce-r.cs));									// Width
		let h=($("body").height()/p.rows)*Math.max(1,Math.abs(r.re-r.rs));									// Height
		let d=$("#jsGrid-schedule").jsGrid("option","data");												// Point at table	
		$("#editorDiv").show();																				// Show editor
		CKEDITOR.instances.editor1.resize(w,0);																// Set size, less content
		let t=CKEDITOR.instances.editor1.container.$.clientHeight;											// Get toolbar height
		CKEDITOR.instances.editor1.resize(w,h+t);															// Set size
		CKEDITOR.instances.editor1.setData(d[this.curRow].content);											// Set editor
		}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATA
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	GDriveLoad(id, table, autoUpdate) 																	// LOAD SHEET FROM GOOGLE DRIVE
	{
		id=id.match(/d\/(.*)\//);																			// Extract id
		if (id && id[1]) id=id[1];																			// Point to it
		var str="https://spreadsheets.google.com/feeds/cells/"+id+"/1/public/values?alt=json";				// Make url
		$.ajax( { url:str, dataType:'jsonp' }).done((data)=>{												// Get data			
			this.InitFromJSON(data.feed.entry, table);														// Cells -> JSON								
			if (autoUpdate) this.SaveToServer(table);														// Save to server?
			}).fail((msg)=> { Sound("delete");																// Delete sound
				PopUp("<p style='color:#990000'><b>Couldn't load Google Doc!</b></p>Make sure that it is<br><b>\"Published to web\"</b><br> in Google",5000); // Popup warning
				});		
	}

	InitFromJSON(cells, table)																			// INIT APP DATA FROM GDOCS JSON FILE
	{
		let i,col,row,o,fields=[], d=[];
		for (i=0;i<cells.length;++i) {																		// For each cell
			o=cells[i];																						// Point at it
			row=o.gs$cell.row-1;																			// Get cell row
			if (d[row] == undefined) d[row]={};																// Create row if not already created	
			if (row) continue;																				// Not the top row			
			fields[o.gs$cell.col-1]=o.content.$t;															// Get field names 	
			}
		if ((table == "people")   && !fields.includes("email")) { PopUp("Wrong type!"); Sound("delete"); return; }		// Wrong table type
		if ((table == "schedule") && !fields.includes("day"))   { PopUp("Wrong type!"); Sound("delete"); return; }		// Wrong table type
		if ((table == "venue")    && !fields.includes("rug"))   { PopUp("Wrong type!"); Sound("delete"); return; }		// Wrong table type

		for (i=0;i<cells.length;++i) {																		// For each cell
			o=cells[i];																						// Point at it
			col=o.gs$cell.col-1; 	row=o.gs$cell.row-1;													// Get cell coords
			if (!row) continue;																				// Not the top row			
			d[row-1][fields[col]]=o.content.$t;																// Add content
			}
		for (i=0;i<d.length;++i) {																			// For each row	
			if ((table == "schedule")    && (d[i].day == undefined))   d.splice(i,1);						// Remove blank row	
			else if ((table == "people") && (d[i].email == undefined)) d.splice(i,1);						// Remove
			else if ((table == "venue")  && (d[i].floor == undefined)) d.splice(i,1);						// Remove
			}
		if (table == "venue") {
			for (i=0;i<d.length;++i) if  (d[i].params)d[i].params=JSON.parse(d[i].params); 					// Objectify if venue params
			}
		else $("#jsGrid-"+table).jsGrid("option","data",d);													// Add lines to grid
		app[table]=d;																						// Copy to app obj
		if (table == "venue") app.EditVenue(d);																// Redraw table with new data	
		Sound("ding");																						// Ding
	}

	SaveToCSV(table)																					// SAVE TO CSV FILE
	{
		let i,d=[];
		if (table == "venue") {																				// If a venue
			for (i=0;i<this.venue.length;++i) d=d.concat(JSON.parse(JSON.stringify(this.venue[i])))			// Flatten floors into single array
			for (i=0;i<d.length;++i)																		// For each room
				if (d[i].params) d[i].params=JSON.stringify(d[i].params);									// Stringify params object
			}
		else
			d=$("#jsGrid-"+table).jsGrid("option","data");													// Get data from spreadsheet
		let str=Papa.unparse(d,{ header:true, skipEmptyLines:true });										// Make CSV using lib
		SaveTextAsFile(this.meetingId+"-"+table+".csv",str);												// Write file	
		Sound("ding");																						// Ding
	}

	StartMeeting(day)																					// START MEETING
	{
		app.ws.send(`>|${this.meetingId}`);																	// Send start
		Sound("ding");																						// Ding
	}
		
	GetFromServer(table)                                                                           	 	// LOAD FROM SERVER
    {
		if (!app.ws) { PopUp("Disconnected!"); return; }													// Not connected	
		if (table == "people") 		app.ws.send(`P|${this.meetingId}`);										// Request people data	
		if (table == "schedule") 	app.ws.send(`S|${this.meetingId}`);										// Schedule
		if (table == "venue") 		app.ws.send(`V|${this.meetingId}`);										// Venue
	}

	SetTableData(table, data)																			// SET TABLE DATA
	{
		let i,j,k,o,oo;
		if (table == "venue") { 																			// Venue
			this.Do();																						// Set do 
			this.EditVenue(data);                                                             				// Make up editor
			return;                                                                                			// Quit
			}
		this[table]=[];		this[table]=data;																// Copy data
		let fields=this[table.charAt(0)+"Fields"];															// Point at fields
		for (i=0;i<data.length;++i) {																		// For each row
			o=data[i];																						// Point at them
			oo={};																							// Clear grid line
			for (j=0;j<fields.length-1;++j) {																// For each grid field
				k=fields[j].name;																			// Get field name
				oo[k]=o[k];																					// Copy value
				}
			}  
		$("#jsGrid-"+table).jsGrid("option","data",this[table]);											// Add lines to grid
		Sound("ding");																						// Ding
	}

	SaveToServer(table)																					// SEND TO SERVER
	{
		let i,j,d=[];
		if (!app.ws) { PopUp("Disconnected!"); return; }													// Not connected	
        if (table == "venue") {																				// Flatten venue into room list
            for (i=0;i<this.venue.length;++i)																// For each floor
                for (j=0;j<this.venue[i].length;++j)														// For each room in floor
                    d.push(this.venue[i][j]);																// Add to array
            }
        else d=$("#jsGrid-"+table).jsGrid("option","data");                                                 // Get data from spreadsheet
		d=JSON.stringify(d);																				// Stringify
		app.ws.send(`W${table.charAt(0).toUpperCase()}|${this.meetingId}|${d}`);							// Write to DB table
		Sound("ding");																						// Ding
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VENUE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	EditVenue(data)																						// MAKE VENUE EDITOR
	{
		let i;
		if (data) {																							// If new data
			this.venue=[];																					// Fresh array
			data.sort((a,b)=>{ return (a.floor-0 > b.floor-0) ? 1 : -1 });									// Sort by floor
			for (i=0;i<data.length;++i) {																	// For each room
				if (!this.venue[data[i].floor])	this.venue[data[i].floor]=[];								// Create new array if empty
				this.venue[data[i].floor].push(data[i]);													// Add room to floor
				}	
			for (i=0;i<this.venue.length;++i) 																// For each floor
				this.venue[i].sort((a,b)=>{ return (a.room-0 > b.room-0) ? 1 : -1 });						// Sort by room
			}
		if (!this.venue[0]) this.venue.push([{ title:"Hallway", rug:"#ffffff", cs:1, ce:2, rs:1, re:2,room:0, floor:0, params:{ rows:4, cols:4, gap:0, avSize:36 }} ]);	// Init if blank
		let d=this.venue[this.curFloor][0].params;
		let r=this.venue[this.curFloor][this.curRoom];
		let str=`<div style="margin-top:12px">
			<datalist id="palette">
			<option value="#ffffff"><option value="#cccccc"><option value="#999999"/><option value="#666666"><option value="#000000"/>
		    <option value="#d8c4ae"><option value="#a2733f"/><option value="#cc4c39"/><option value="#58aab4"/><option value="#5b66cb"/>
			<option value="#6e9456"/><option value="#ba57ad"/>
			${localStorage.getItem("palette-"+this.meetingId)}</datalist>										
			<div class="co-venue">
				<table>
				<tr style="vertical-align:top"><td><b>CURRENT FLOOR</b><br><br></td><td><select id="evFloor" class="co-is" style="width:100px;font-size:13px"></select></td></tr>
				<tr><td>Background color</td><td><input class='co-is' style='width:60px' type='text' id='ev-bcol' value='${(d.bcol ? d.bcol : "#ffffff")}'>
				<div id='ev-bcolc' class='co-colChip' style='background-color:${(d.bcol ?d.bcol : "#ffffff")}'></td></tr>	
				<tr><td>Number of columns&nbsp; </td><td><input class='co-is' type='text' id='ev-cols' value='${(d.cols ? d.cols : 10)}'></td></tr>	
				<tr><td>Number of rows</td><td><input class='co-is' type='text' id='ev-rows' value='${(d.rows ? d.rows : 3)}'></td></tr>	
				<tr><td>Grid gap</td><td><input class='co-is' type='text' id='ev-gap' value='${(d.gap ? d.gap : 0)}'></td></tr>	
				<tr><td>Avatar size</td><td><input class='co-is' type='text' id='ev-avs' value='${(d.avSize ? d.avSize : 36)}'></td></tr>	
				<tr style="vertical-align:top"><td>Video room<br><br></td><td><select id="evVideo" class="co-is" style="width:100px;font-size:13px"></select></td></tr>
				<tr><td colspan='2'>&nbsp;</td></tr>	
				<tr><td><div id='evAddFloor' class='co-bs'>Add floor</div></td><td><img id='evDelFloor' src='img/deletebut2.png' style='float:right;cursor:pointer'></td></tr>	
				<tr><td colspan='2'><br><hr><br></td></tr>	
				<tr style="vertical-align:top"><td><b>CURRENT ROOM</b><br><br></td><td><select id="evRoom" class="co-is" style="width:100px;font-size:13px"></select></td></tr>
				<tr><td>Room color</td><td><input class='co-is' style='width:60px' type='text' id='ev-rug' value='${(r.rug ? r.rug : "#ffffff")}'>
				<div id='ev-rugc' class='co-colChip' style='background-color:${(r.rug ? r.rug : "#ffffff")}'></td></tr>	
				<tr><td>Room title</td><td><input class='co-is' type='text' id='ev-title' value='${(r.title ? r.title : "")}'></td></tr>	
				<tr><td>Room CSS</td><td><textArea class='co-is' type='text' id='ev-css'>${(r.css ? r.css : "")}</textArea></td></tr>	
				<tr><td>Link</td><td><input class='co-is' type='text' id='ev-link' value='${(r.link ? r.link : "")}'></td></tr>	
				<tr><td>Children</td><td><input class='co-is' type='text' id='ev-por' value='${(r.portal ? r.portal : "")}'></td></tr>	
				<tr><td>Room number</td><td><input class='co-is' type='text' id='ev-room' value='${r.room}'></td></tr>	
				<tr><td colspan='2'>&nbsp;</td></tr>	
				<tr><td><div id='evAddRoom' class='co-bs'>Add room</div></td><td><img id='evDelRoom' src='img/deletebut2.png' style='float:right;cursor:pointer'></td></tr>	
				</table>
			
		</div>
		<div id="gridHolder" style="display:inline-block;width:calc(100% - 288px)"></div></div>`;
		$("#venueEditor").html(str.replace(/\t|\n|\r/g,""));
		d.bcol=$("#ev-bcol").val();																			// Bg color
		d.cols=$("#ev-cols").val();																			// Get columns value
		d.rows=$("#ev-rows").val();																			// Rows
		d.gap=$("#ev-gap").val();																			// Gap
		d.avSize=$("#ev-avs").val();																		// Avatar size 
		r.portal=$("#ev-por").val();																		// Portal
		r.link=$("#ev-link").val();																			// Linl
		r.rug=$("#ev-rug").val();																			// Room rug
		r.room=$("#ev-room").val();																			// Room number
		r.css=$("#ev-css").val();																			// Room style
		r.title=$("#ev-title").val();																		// Room title
		this.DrawVenue();																					// Draw venue grid

		$("#ev-rug").on("change",()=>{  $("#ev-rugc").css("background-color",$("#ev-rug").val()) });		// Chip follows color field
		$("#ev-bcol").on("change",()=>{ $("#ev-bcolc").css("background-color",$("#ev-bcol").val()) });		// Field
		$("#ev-rugc").on("click",()=>{  ColorPicker("#ev-rug") });											// Advanced color
		$("#ev-bcolc").on("click",()=>{ ColorPicker("#ev-bcol") });											// Advanced 

		$("#evAddRoom").on("click",()=>{																	// ON ADD ROOM
			this.Do();																						// Set do 
			this.curRoom=this.venue[this.curFloor].length;													// Set new current room
			let o={ cs:1, ce:2, rs:1, re:2, rug:"#cccccc", title:"Change!", floor: this.curFloor, room:this.curRoom };
			this.venue[this.curFloor].push(o);																// Add room
			Sound("ding");																					// Ding
			this.EditVenue();																				// Redraw
			});

		$("#evAddFloor").on("click",()=>{																	// ON ADD FLOOR
			this.Do();																						// Set do 
			this.curFloor=this.venue.length;																// Set new current floor
			let o=[{ cs:1, ce:2, rs:1, re:2, rug:"#cccccc", title:"Hallway", floor: this.curFloor, room:this.curRoom, params:{ rows:4, cols:4, gap:0 } }];
			this.venue.push(o);																				// Add floor
			Sound("ding");																					// Ding
			this.EditVenue();																				// Redraw
			});

		$("#evDelRoom").on("click",()=>{																	// ON DELETE ROOM
			this.Do();																						// Set do 
			if (!this.curRoom)	PopUp("You can't delete the hallway!");										// Warn
			else				ConfirmBox("Are you sure?","",()=>{ 										// Ask if sure
												this.venue[this.curFloor].splice(this.curRoom,1);			// Kill room
												Sound("delete");											// Delete sound
												this.curRoom=0;												// Room to 0
												this.EditVenue();											// Redraw
												});
			});

		$("#evDelFloor").on("click",()=>{																	// ON DELETE ROOM
			this.Do();																						// Set do 
			if (!this.curFloor)	PopUp("You can't delete the first floor!");									// Warn
			else				ConfirmBox("Are you sure?","",()=>{ 										// Ask if sure
												this.venue.splice(this.curFloor,1);							// Kill floor
												Sound("delete");											// Delete sound
												this.curRoom=0;												// Room to 0
												this.curFloor=0;											// Floor to 0
												this.EditVenue();											// Redraw
												});
			});

		$("#evFloor").on("change",()=>{	this.curFloor=$("#evFloor").prop("selectedIndex"); 					// On floor change
										this.curRoom=0;														// Room to 0
										this.EditVenue(); 
										$("#evVideo").prop("selectedIndex",0);
										$("#evRoom").prop("selectedIndex",0)
										});	

		$("#evRoom").on("change",()=>{	this.curRoom=$("#evRoom").prop("selectedIndex"); this.EditVenue();})// On room change
		$("#evVideo").on("change",()=>{	d.vRoom=$("#evVideo").prop("selectedIndex"); this.EditVenue(); })	// On room change
		$("[id^=ev-]").on("change",(e)=>{																	// On param change
			this.Do();																						// Set do 
			d.bcol=$("#ev-bcol").val();																		// Background color
			d.cols=$("#ev-cols").val();																		// Get columns value
			d.rows=$("#ev-rows").val();																		// Rows
			d.gap=$("#ev-gap").val();																		// Gap
			d.avSize=$("#ev-avs").val();																	// Avatar size
			r.portal=$("#ev-por").val();																	// Portal
			r.link=$("#ev-link").val();																		// Link
			r.rug=$("#ev-rug").val();																		// Room rug
			r.room=$("#ev-room").val();																		// Room number
			r.css=$("#ev-css").val();																		// Room style
			r.title=$("#ev-title").val();																	// Room title
			this.DrawVenue();																				// Draw venue grid
			});
	}	
	
	DrawVenue()																							// DRAW THE VENUE GRID
	{
		let i,j,x,y,o,s;
		let d=this.venue[this.curFloor][0].params;
		$("#popupDiv").remove();																			// Kill popup
		$("#evRoom").empty();																				// Clear room select
		$("#evFloor").empty();																				// Clear floor select
		$("#evVideo").empty();																				// Clear floor select
		for (i=0;i<app.venue.length;++i)																	// For each floor
			$("#evFloor").append(`<option>${i}</option>`);													// Add to select
		for (i=0;i<app.venue[app.curFloor].length;++i) {													// For each title
			s=app.venue[app.curFloor][i].title;																// Get title
			$("#evVideo").append(`<option>${app.venue[app.curFloor][i].room+". "+s}</option>`);				// Add to select
			}
		for (i=0;i<app.venue[app.curFloor].length;++i) {													// For each title
			s=app.venue[app.curFloor][i].title;																// Get title
			$("#evRoom").append(`<option>${app.venue[app.curFloor][i].room+". "+s}</option>`);				// Add to select
			}
		$("#evFloor").prop("selectedIndex",this.curFloor);													// Set floor select	
		$("#evRoom").prop("selectedIndex",this.curRoom);													// Room	
		$("#evVideo").prop("selectedIndex",d.vRoom);														// Video room
		let str=`<div id="co-grid" class="co-grid">`;														// Add grid
		for (i=1;i<=d.rows;++i)																				// For each row
				for (j=1;j<=d.cols;++j)																		// For each col
					str+=`<div id="co-r${j}-${i}" class="co-room"><br>${i}-${j}</div>`;						// Add div
		str+=`</div>`;
		$("#gridHolder").html(str.replace(/\t|\n|\r/g,""));													// Add grid
		$("#co-grid").css("grid-template-columns","repeat("+d.cols+", 1fr)");								// Columns
		$("#co-grid").css("grid-gap",d.gap+"px");															// Gap
		$("#co-grid").css("background-color",d.bcol);														// Bg color

		for (i=0;i<app.venue[app.curFloor].length;++i) {													// For each room
			o=app.venue[app.curFloor][i];																	// Point at it
			o.cs=o.cs-0; o.rs=o.rs-0; o.rs=o.rs-0; o.re=o.re-0;												// Ints
			if (o.rs == o.re) o.re++;																		// Expand to at least 1 cell
			if (o.cs == o.ce) o.ce++;																		// Expand
			for (y=o.cs;y<o.ce;++y)																			// For each column
				for (x=o.rs;x<o.re;++x)																		// For each row
					$(`#co-r${y}-${x}`).css("background-color",o.rug);										// Set color
			}
	
		$("[id^=co-r]").on("click",(e)=>{																	// ON ROOM CLICK
			let v=e.currentTarget.id.substr(4).split("-");													// Get col/row
			for (i=0;i<app.venue[app.curFloor].length;++i) {												// For each room
				o=app.venue[app.curFloor][i];																// Point at it
				if ((v[0]-0 >= o.cs-0) && (v[0]-0 < o.ce-0) && (v[1]-0 >= o.rs-0) && (v[1]-0 < o.re-0)) {	// In room
					this.curRoom=i;																			// Set room
					this.EditVenue();																		// Redraw
					break;
					}												
				}
			});
		
		this.DrawRoom();																					// Draw room overlay																	
	}

	DrawRoom()
	{
		let r=this.venue[this.curFloor][this.curRoom];														// Get room
		let p=this.venue[this.curFloor][0].params;															// Get params						
		let gap=p.gap-0;																					// Get gap							
		if (r.rs == r.re) r.re++;																			// Expand to at least 1 cell
		if (r.cs == r.ce) r.ce++;																			// Expand
		$("#popupDiv").remove();																			// Kill popup

		let l=290;
		let t=$("#co-tab").position().top+24;
		let cw=$("#co-r1-1").width()+gap-0+2;
		let ch=$("#co-r1-1").height()+gap-0+2;
		let x=l+(r.cs-1)*cw;
		let y=t+(r.rs-1)*ch;
		let w=cw*(r.ce-r.cs)-gap-3;
		let h=ch*(r.re-r.rs)-gap-4;
		let str=`<div id="co-room" style="text-align:center;color:#fff;border:2px dashed #000;position:absolute;cursor:pointer;background-color:${r.rug};
		left:${x}px;top:${y}px;width:${w}px;height:${h}px;${r.css ? r.css : ""}"></div>`
		$("#gridHolder").append(str)
		$("#co-room").html(r.room+". "+r.title);
		$("#co-room").draggable({	stop:()=>{ setPos(); }, 
								  	containment:[ l,t+46,8000,8000],
									grid: [ cw, ch ]
		 							});
		$("#co-room").resizable({ stop:()=>{ setPos(); }});
	
		function setPos()
		{
			let x1=$("#co-room").offset().left-l;
			let x2=x1+$("#co-room").width()+gap;
			r.cs=Math.max(1,Math.min(Math.floor(x1/cw+1),p.cols-0+1));
			r.ce=Math.max(1,Math.min(Math.floor(x2/cw+1),p.cols-0+1));
			let y1=$("#co-room").offset().top-t-24;
			let y2=y1+$("#co-room").height()+gap;
			r.rs=Math.max(1,Math.min(Math.floor(y1/ch+1),p.rows-0+1));
			r.re=Math.max(1,Math.min(Math.floor(y2/ch+1),p.rows-0+1));
			app.DrawVenue();
		}

	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LIVE / PICS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	DrawLive()																						// MAKE LIVE EDITOR
	{
		let i,s,o,cf=0;
		let str=`<br><table style="border-spacing:8px">
		<tr><td><b>Meeting</b></td><td><div class="co-bs" id="co-start">Start meeting</div></td></tr>
		<tr><td><b>Update</b></td><td><div class="co-bs" id="co-updpeople">People</div>&nbsp;&nbsp;&nbsp;
		<div class="co-bs" id="co-updschedule">Schedule</div>&nbsp;&nbsp;&nbsp;
		<div class="co-bs" id="co-updvenue">Venue</div></td></tr>
		<tr><td><b>Images</b></td><td><div class="co-images" id="co-images"><br></div>
		<div class="co-bs" style="float:right;margin-top:6px" id="co-addImage">Add new image</div></td></tr>
		<tr><td><b>Preview</b></td><td><div class="co-bs" id="co-preview">Preview this meeting locally</div></td></tr></table>`
		$("#liveEditor").html(str.replace(/\t|\n|\r/g,""));

		for (i=0;i<app.venue.length;++i) $("#dlFloor").append(`<option>${i}</option>`);					// For each floor, add to select
		for (i=0;i<app.schedule.length;++i) {															// For each event
			s=app.schedule[i].desc;																		// Get description
			$("#dlEvent").append(`<option>${i+". "+s}</option>`);										// Add to select
			}
		roomSelect(cf);																					// Set room
		setEvent(cf);																					// Set event
	
		str="";
		for (i=0;i<app.S3Images.length;++i) {															// For each image
			str+=`<div id="co-pic-${i}", class="co-pic">`;
			if (app.S3Images[i].match(/gif|png|jpeg|jpg/i)) str+=`<img src="https://etalimages.s3.amazonaws.com/${app.S3Images[i]}" width="100%">`;
			else											str+="<br>"+app.S3Images[i];
			str+="</div>";
			}
		$("#co-images").html(str.replace(/\t|\n|\r/g,""));
		
		$("[id^=co-pic-]").on("click", (e)=> {															// ON PIC CLICK
			let id=e.currentTarget.id.substr(7);														// Get id
			PopUp(app.S3Images[id]+"<br>Copied to clipboard");											// Show it
			$("#clipOutputDiv").val("https://etalimages.s3.amazonaws.com/"+app.S3Images[id]);			// Copy to shill
			$("#clipOutputDiv")[0].select();															// Select
			try { if (document.execCommand('copy'))	Sound("ding");	} catch (e) {}						// Copy to clipboard
			});

		$("#co-addImage").on("click",()=>{ $("#co-imageUpload").trigger("click") })						// ON ADD IMAGE	
	
	
		$("#dlFloor").on("change",()=>{ 																// ON FLOOR CHANGE
			cf=$("#dlFloor").prop("selectedIndex"); 													// Get new floor			
			$("#dlRoom").prop("selectedIndex",0);														// Room to start
			roomSelect(cf);																				// Fill room select
			setEvent(cf);																				// Set event
			});	

		$("#dlRoom").on("change",()=>{ setEvent(cf); });												// ON ROOM CHANGE
		$("#co-updpeople").on("click",()=>{	  app.ws.send(`U|${app.meetingId}|people`); Sound("ding"); });	 // ON UDATE PEOPLE
		$("#co-updschedule").on("click",()=>{ app.ws.send(`U|${app.meetingId}|schedule`); Sound("ding"); }); // SCHEDULE
		$("#co-updvenue").on("click",()=>{	  app.ws.send(`U|${app.meetingId}|venue`); Sound("ding"); });	 // VENUE

		function roomSelect(cf) {																		// FILL ROOM SELECT
			$("#dlRoom").empty();																		// Start over
			for (i=0;i<app.venue[cf].length;++i) {														// For each title
				s=app.venue[cf][i].title;																// Get title
				$("#dlRoom").append(`<option>${i+". "+s}</option>`);									// Add to select
				}
			setEvent(cf);																				// Set event
		}

		function setEvent(cf) {																			// SET EVENT SELECT OPTION BASED ON FLOOR/ROOM
			let cr=$("#dlRoom").prop("selectedIndex");													// Get selected room
			for (i=0;i<app.schedule.length;++i) {														// For each event
				o=app.schedule[i];																		// Get description
				if ((o.floor == cf) && (o.room == cr)) {												// A match
					$("#dlEvent").prop("selectedIndex",i);												// Set current event
					break;																				// Quit looking
					}
			}
		}

		$("#dlSetRoom").on("click",()=>{																// ON RESET ROOM
			let e=$("#dlEvent").prop("selectedIndex");													// Get selected event
			let f=$("#dlFloor").prop("selectedIndex");													// Get selected floor
			let r=$("#dlRoom").prop("selectedIndex");													// Get selected room
			$("#jsGrid-schedule").jsGrid("updateItem", e, { floor:"f", room:"r" })
			Sound("ding");
			//	app.ws.send(`RS|${app.meetingId}}|${f}}|${r}|${id}`);									// Reset event's room/floor
			});
	
		$("#co-start").on("click",(e)=>{ app.StartMeeting(); });										// ON START MEETING

		$("#co-preview").on("click", ()=> {  															// ON PREVIEW 
			let i,j,d=[];
			for (i=0;i<this.venue.length;++i)															// For each floor
                for (j=0;j<this.venue[i].length;++j)													// For each room in floor
                    d.push(this.venue[i][j]);															// Add to array
			localStorage.setItem('venue', JSON.stringify(d));											// Store locally
			d=$("#jsGrid-people").jsGrid("option","data");                                              // Get people data from spreadsheet
			localStorage.setItem('people', JSON.stringify(d));											// Store locally
			d=$("#jsGrid-schedule").jsGrid("option","data");                                            // Get schedule
			localStorage.setItem('schedule', JSON.stringify(d));										// Store locally
			if (app.previewWin)	app.previewWin.close();									
			app.previewWin=window.open("index.html?preview");											// Open preview tab
			Sound("ding"); 																				// Ding
			});
	}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UDDO
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Do()																						// SAVE DO ACTION
	{
		let i;
		this.undos[this.curUndo]=JSON.parse(JSON.stringify(this.venue));							// Add to undos
		this.curUndo++;																				// Advance index
		for (i=0;i<this.undos.length-this.curUndo;++i)	this.undos.pop();							// Remove ones beyond this point		
	}

	Undo()																						// UNDO SAVED ACTION
	{
		if (!this.curUndo) {  Sound("delete");	return;	}											// No undos to un-do
		this.curUndo--;																				// Dec index
		this.venue=JSON.parse(JSON.stringify(this.undos[this.curUndo]));							// Save state
		this.EditVenue();																			// Redraw
		Sound("ding");																				// Acknowledge
	}

	Redo()																						// REDO UNDO ACTION
	{
		let o;
		if (this.curUndo >= this.undos.length) 		return false;									// No redos to re-do
		if (this.curUndo == this.undos.length-1)	o=JSON.parse(JSON.stringify(this.venue));		// If on last one, redo is current state
		else										o=this.undos[this.curUndo+1];					// Point at saved state and advance index
		this.curUndo++;																				// Inc index
		this.venue=JSON.parse(JSON.stringify(o));													// Restore venue
		this.EditVenue();																			// Redraw
//		Sound("ding");																				// Acknowledge
		return true;																				// Worked
	}

} // Class closure

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TEXT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ReadFile(e, id, table) 
	{
		let i;
		let file=e.target.files[0];
		if (!file) 	return;
		let reader=new FileReader();
		reader.readAsText(file);
		reader.onload=(e)=>{ 
			let d=Papa.parse(e.target.result, { header:true, skipEmptyLines:true }).data;					// Parse CSV using papa lib
			if ((table == "people")   && !d[0].email) { PopUp("Wrong type!"); Sound("delete"); return; }	// Wrong table type
			if ((table == "schedule") && !d[0].day)  { PopUp("Wrong type!"); Sound("delete"); return; }		// Wrong table type
			if ((table == "venue")    && !d[0].rug)  { PopUp("Wrong type!"); Sound("delete"); return; }		// Wrong table type
			for (i=0;i<d.length;++i) {																		// For each row	
				if ((table == "schedule")    && (d[i].day == undefined))   d.splice(i,1);					// Remove blank row	
				else if ((table == "people") && (d[i].email == undefined)) d.splice(i,1);					// Remove
				else if ((table == "venue")  && (d[i].floor == undefined)) d.splice(i,1);					// Remove
				}
			if (table == "venue") { 
				for (let i=0;i<d.length;++i)
					if (d[i].params)	
						d[i].params=JSON.parse(d[i].params);
				app.EditVenue(d);
				}
			else  $("#jsGrid-"+table).jsGrid("option", "data", d);
			Sound("ding");																				// Ding
			};
	}

	function SaveTextAsFile(file, contents)														// SAVE TEXT TO LOCAL FILE
	{
		var textFileAsBlob=new Blob([contents], {type:'text/plain'});
		var downloadLink=document.createElement("a");
		downloadLink.download=file;
		downloadLink.innerHTML="Download File";
		downloadLink.href=window.URL.createObjectURL(textFileAsBlob);
	    downloadLink.onclick=()=>{ downloadLink.remove(); };
		downloadLink.style.display="none";
		downloadLink.id="tdll";
		document.body.appendChild(downloadLink);
		downloadLink.click();
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function GetTextBox(title, content, def, callback, x, y)										// GET TEXT LINE BOX
	{
		$("#confirmBoxDiv").remove();																	// Remove 
		$("body").append("<div class='co-confirm' id='confirmBoxDiv' style='text-align:center'></div>");// Add box								
		if (x != undefined)		$("#confirmBoxDiv").css({ left:x+"px", top:y+"px" });					// Position if set
		let str="<img src='img/logo.png' width='64'/><br>";												// Logo					
		str+="<p style='font-size:14px; color:#666'><b>"+title+"</b></p>";
		str+="<p>"+content+"<p>";
		str+="<p><input class='co-is' style='width:95%' type='text' id='gtBoxTt' value='"+def+"'></p>";
		str+="<div id='dialogOK' class='co-bs'>OK</div>";
		str+="<div id='dialogCancel' class='co-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);																	// Add to div
		$("#gtBoxTt").focus();																			// Focus on button
		$("#gtBoxTt").on("change", function() {	callback($("#gtBoxTt").val()); $("#confirmBoxDiv").remove(); });	// ONE ENTER
		$("#dialogOK").on("click", function() {	callback($("#gtBoxTt").val()); $("#confirmBoxDiv").remove(); });	// ON OK 
		$("#dialogCancel").on("click", function() {	$("#confirmBoxDiv").remove(); });								// ON CANCEL
		}

	function Login(callback)																		// LOG IN
	{
		$("#confirmBoxDiv").remove();																	// Remove 
		$("body").append("<div class='co-confirm' id='confirmBoxDiv'></div>")							// Add box								
		let str=`<img src='img/logo.png' width='64'/>														
		<span style='font-size:16px;float:right'><b>LOG IN</b></span><br><br><table>
		<tr><td>Email</td><td><input class='co-is' type='text' id='username' name='username'></td></tr>
		<tr><td>Password</td><td><input class='co-is' type='password' id='password' name='password'></td></tr>
		<tr><td>Meeting Id &nbsp; </td><td><input class='co-is' type='text' id='gtBoxId'></td></tr>
		</table><br><div id='dialogOK' class='co-bs'>Log in</div>`;
		$("#confirmBoxDiv").html(str);																	// Add to div
		if (window.location.host == "localhost") callback=function() {									// Local callback
			app.meetingId=window.location.search.substring(1); 											// Set id
			$("#co-meetingName").text("MEETING ID: " +app.meetingId);									// Set title
			app.ws.send(`P|${app.meetingId}`);															// Request people data	
			app.ws.send(`V|${app.meetingId}`);															// Venue 
			app.ws.send(`S|${app.meetingId}`);															// Schedule
			app.ws.send(`IMGL|${app.meetingId}`);														// S3 images
			}
		$("#gtBoxId").on("change", ()=>{																// ON ENTER ID
			callback($("#username").val(),$("#password").val(),$("#gtBoxId").val());					// Send data back
			$("#confirmBoxDiv").remove(); 																// Kill dialog
			});	 
		$("#dialogOK").on("click", ()=>{																// ON OK
			callback($("#username").val(),$("#password").val(),$("#gtBoxId").val());					// Send data back
			$("#confirmBoxDiv").remove(); 																// Kill dialog
			});	 
	}

	function ConfirmBox(title, content, callback, callback2)										// CONFIRMATION BOX
	{
		Sound("ding");																					// Ding sound
		$("#confirmBoxDiv").remove();																	// Remove 
		$("body").append("<div class='co-confirm' id='confirmBoxDiv'></div>");														
		let str="<img src='img/logo.png' width='64'/><br>";													// Logo					
		str+="<p style='font-size:14px; color:#666'><b>"+title+"</b></p>";
		str+="<p>"+content+"<p>";
		str+="<div style='float:right'><div id='confirmOK' class='co-bs'>OK</div>";
		str+="<div id='confirmCancel' class='co-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);	
	
		$("#confirmOK").on("click", function() {														// ON OK BUT
				$("#confirmBoxDiv").remove();															// Remove 
				if (callback)	callback();																// If callback defined, run it
				});

		$("#confirmCancel").on("click", function() {													// ON CANCEL BUT
				$("#confirmBoxDiv").remove();															// Remove 
				if (callback2)	callback2();															// If callback defined, run it
				Sound("delete");																		// Delete sound
				});
	}

	function Sound(sound, mute)															// PLAY SOUND
	{
		var snd=new Audio();																// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)								// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");					// Use built in mp3
		if (!mute)	{																		// If not initing or muting	
			snd.volume=50/100;																// Set volume
			snd.play();																		// Play it
			}
	}

	function PopUp(msg, time, div)														// TIMED POPUP
	{
		var str="";
		$("#popupDiv").remove();															// Kill old one, if any
		str+="<div id='popupDiv' class='co-popup'>"; 										// Add div
		if (time == -1) {																	// If has close but
			time=100000;																	// Increase time
			str+="<img id='pu-close' src='img/closedot.gif' style='float:right;cursor:pointer'>";	// Add close button
			}
		str+=msg+"</div>"; 																	// Add div
		$(div ? "#"+div : "body").append(str);												// Add popup to div or body
		$("#pu-close").click(function() { $("#popupDiv").remove(); });						// Remove on click of close but
		$("#popupDiv").fadeIn(500).delay(time ? time : 2000).fadeOut(500)					// Animate in and out		
	}

	function ColorPicker(id)															// COLOR PICKER
	{
		let str="";
		let col=$(id).val();																// Starting color
		let p=$(id).offset();																// Position on color chi[
		$("#popupDiv").remove();															// Kill old one, if any
		str=`<div id='popupDiv' class='co-popup' style='left:${p.left}px;top:${p.top}px'>						
		<input class='co-is' type='color' id='co-cpcp' value='${(col ? col : "#ffffff")}' list='palette'>	
		&nbsp;<img id='pu-close' src='img/closedot.png' style='cursor:pointer'>`;
		$("body").append(str);																// Add to body

		$("#pu-close").click(function() { $("#popupDiv").remove(); });						// Remove on click of close but
		$("#popupDiv").fadeIn(500);															// Animate in 
		$("#co-cpcp").on("change",()=>{														// On color change
			$(id).val($("#co-cpcp").val());													// Set value
			$(id).trigger("change");														// Trigger change
			$("#popupDiv").remove();														// Close
			});
	}

	function trace(msg, p1, p2, p3, p4)									
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function GetCookie(cname) 												// GET COOKIE
	{
		let i,c,name=cname+"=";
		let ca=decodeURIComponent(document.cookie).split(';');					// Get cookie array
		for (i=0;i<ca.length;i++) {												// For each cookie
			c=ca[i];
			while (c.charAt(0) == ' ')	c=c.substring(1);
			if (c.indexOf(name) == 0) 	return c.substring(name.length, c.length);
			}
		return "";
	}

	function ParseJWT(token)
	{
		var base64Url=token.split('.')[1];
		var base64=base64Url.replace(/-/g, '+').replace(/_/g, '/');
		var jsonPayload=decodeURIComponent(atob(base64).split('').map(function(c) {
			return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
			}).join(''));
		return JSON.parse(jsonPayload);
	}

</script>
</body>
</html>
